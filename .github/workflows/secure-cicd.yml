name: Secure CI/CD
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
      
permissions:
  actions: read
  contents: read
  security-events: write
  
jobs:
  codeql:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        language:
          - java
          - javascript
          
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: temurin
          cache: maven
          
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}
          
      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: set directory
        run: mkdir artifact
        
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          upload: true
      
      - name: Upload results
        uses: actions/upload-artifact@v2
        with:
          name: codeql-results
          path: /home/runner/work/WebGoat/results/
          
  sonar:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: temurin
          cache: maven
          
      - name: Cache SonarQube packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
          
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
          
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar
          -Dsonar.projectKey=webgoat-sast -Dsonar.projectName='webgoat sast'

      - name: Get SonarQube Analysis Report
        run: |
          mkdir artifact
          cd artifact
          echo '{}' > sonar-result.json
          curl -u ${{ secrets.SONAR_USER_TOKEN }}: "${{ secrets.SONAR_HOST_URL }}/api/issues/search?projectKeys=webgoat-sast" | jq '.' > sonar-result.json

      - name: Upload results
        uses: actions/upload-artifact@v2
        with:
          name: sonar-result
          path: artifact/sonar-result.json
          
  Anchore-Build-Scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v3
        
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: temurin
          cache: maven
          
      - name: Build with Maven
        run: mvn -B package --file pom.xml
        
      - name: Build the Docker image
        run: docker build . --file Dockerfile --tag localbuild/testimage:latest
        
      - name: Scan the image and upload dependency results
        uses: anchore/sbom-action@bb716408e75840bbb01e839347cd213767269d4a
        with:
          image: localbuild/testimage:latest
          format: cyclonedx-json
          artifact-name: sbom-cyclonedx.json
          github-token: ${{ secrets.PERSONAL_TOKEN }}
          dependency-snapshot: true

      - name: Create Docker Container
        run : docker run -d -p 8080:8080 localbuild/testimage:latest

      - name: ZAP Full Scan
        uses: zaproxy/action-full-scan@v0.7.0
        with:
          token: ${{ secrets.PERSONAL_TOKEN }}
          target: "http://localhost:8080"
          allow_issue_writing: false 

  SBOM-Scan:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install Dependencies
        run : |
          pip install requests
          pip install lxml

      - name: Get SBOM report
        run: |
          mkdir artifact
          cd artifact
          echo '{}' > sbom-result.json
          curl -X GET "${{ secrets.TRACKER_URL }}" -H "accept: */*" -H "Content-Type: application/json" -H "X-Api-Key: ${{ secrets.TRACKER_TOKEN }}" | jq '.' > sbom-result.json

      - name: recommend references
        run: |
          cd artifact
          export PYTHON_CODE="${{ secrets.PYTHON_CODE }}"
          echo "$PYTHON_CODE" | base64 --decode > script.py
          cat script.py
          python script.py
        
      - name: Upload results
        uses: actions/upload-artifact@v2
        with:
          name: sbom-result
          path: artifact/sbom-result.json
