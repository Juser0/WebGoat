name: Secure CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '40 12 * * 5'

jobs:
  codeql:
      name: codeql
      runs-on: ubuntu-latest
      permissions:
        actions: read
        contents: read
        security-events: write
  
      strategy:
        fail-fast: false
        matrix:
          language: [ 'java', 'javascript' ]
  
      steps:
      - name: Checkout repository
        uses: actions/checkout@v3
  
      - uses: actions/setup-java@v3
        with:
          java-version: 17
  
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}
  
      - name: Autobuild
        uses: github/codeql-action/autobuild@v2
  
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:${{matrix.language}}"
          
  sonar:
    name: sonar
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
      - name: Cache SonarQube packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=webgoat-sast -Dsonar.projectName='webgoat sast'


  veracode:
      # The type of runner that the job will run on
      permissions:
        contents: read # for actions/checkout to fetch code
        security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
        actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
      runs-on: ubuntu-latest
      steps:
      - uses: actions/checkout@v3
      - run: zip -r veracode-scan-target.zip ./
  
      # download the Veracode Static Analysis Pipeline scan jar
      - run: curl --silent --show-error --fail -O https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip
      - run: unzip -o pipeline-scan-LATEST.zip
  
      - uses: actions/setup-java@v3
        with:
          java-version: 17
      - run: java -jar pipeline-scan.jar --veracode_api_id "${{secrets.VERACODE_API_ID}}" --veracode_api_key "${{secrets.VERACODE_API_KEY}}" --fail_on_severity="Very High, High" --file veracode-scan-target.zip
        continue-on-error: true
      - name: Convert pipeline scan output to SARIF format
        id: convert
        uses: veracode/veracode-pipeline-scan-results-to-sarif@ff08ae5b45d5384cb4679932f184c013d34da9be
        with:
          pipeline-results-json: results.json
      - uses: github/codeql-action/upload-sarif@v2
        with:
          # Path to SARIF file relative to the root of the repository
          sarif_file: veracode-results.sarif

  Anchore-Build-Scan:
      permissions:
        contents: write # required to upload to the Dependency submission API
      runs-on: ubuntu-latest
      steps:
      - name: Checkout the code
        uses: actions/checkout@v3
        
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
          
      - name: Build with Maven
        run: mvn -B package --file pom.xml
        
      - name: Build the Docker image
        run: docker build . --file Dockerfile --tag localbuild/testimage:latest
      
      - name: Scan the image and upload dependency results
        uses: anchore/sbom-action@bb716408e75840bbb01e839347cd213767269d4a
        with:
          image: "localbuild/testimage:latest"
          artifact-name: image.spdx.json
          dependency-snapshot: true
